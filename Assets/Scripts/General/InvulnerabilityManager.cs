using System.Collections;
using System.Collections.Generic;
using TMPro;
using Unity.VisualScripting;
using UnityEngine;

/// <summary>
/// 无敌时间管理
/// </summary>
public class InvulnerabilityManager : MonoBehaviour
{
    /// <summary>
    /// 无敌时间配置数据
    /// </summary>
    public List<InvulnerabilityConfigSO> configList;

    /// <summary>
    /// 时间计时器字典   游戏对象-计时器
    /// </summary>
    private Dictionary<Character, float> invulnerableCounterDictionary = new Dictionary<Character, float>();
    /// <summary>
    /// 无敌状态字典     游戏对象-无敌状态
    /// </summary>
    private Dictionary<Character, bool> invulnerableStatusDictionary = new Dictionary<Character, bool>();

    /// <summary>
    /// 无敌时间计时器
    /// </summary>
    //public float invulnerableCounter;
    /// <summary>
    /// 是否无敌状态
    /// </summary>
    //private bool isInvulnerable;

    /// <summary>
    /// 游戏对象tag - <无敌类型-时间>  字典   由配置的configList读取获得
    /// </summary>
    private Dictionary<string,Dictionary<InvulnerabilityType, float>> invulnerabilityDurationsDicts = new  Dictionary<string, Dictionary<InvulnerabilityType, float>>();

    #region 单例

    private static InvulnerabilityManager instance;
    public static InvulnerabilityManager Instance
    {
        get
        {
            return instance;
        }
    }

    #endregion


    private void Awake()
    {
        if (instance == null)
        {
            instance = this;
        }
        else
        {
            Destroy(gameObject);
        }

        Initialize();
    }

    private void Update()
    {
        // 需要重置参数的对象列表
        List<Character> toRestList = new List<Character>();
        // 无效的character  需要从字典中删除
        List<Character> toRemoveList = new List<Character>();
        var tempDic = new Dictionary<Character,float>(invulnerableCounterDictionary);
        foreach (var entry in tempDic)
        {
            
            Character character = entry.Key;

            //检查character是否已经被销毁
            if(character == null)
            {
                toRemoveList.Add(character);
                continue;
            }

            float counter = entry.Value;
            if (counter > 0)
            {
                // 无敌倒计时
                invulnerableCounterDictionary[character] -= Time.deltaTime;
                if (tempDic[character] <= 0)
                {
                    // 需要重置参数
                    toRestList.Add(character);
                }
            }
        }

        // 重置无敌状态
        foreach(var character in toRestList)
        {
            ResetInvulnerability(character);
        }
        // 移除被销毁的对象
        foreach(var character in toRemoveList)
        {
            invulnerableCounterDictionary.Remove(character);
            invulnerableStatusDictionary.Remove(character);
        }
    }

    /// <summary>
    /// 初始化配置字典
    /// </summary>
    private void Initialize()
    {
        foreach(var entry in configList)
        {
            InvulnerabilityConfigSO configSO = entry;
            string tag = entry.tag;
            Dictionary<InvulnerabilityType, float> dic = new Dictionary<InvulnerabilityType, float>();
            foreach(var config in configSO.invulnerabilityList)
            {
                dic.Add(config.type, config.duration);
            }
            invulnerabilityDurationsDicts.Add(tag, dic);
        }
    }

    /// <summary>
    /// 获取当前游戏对象是否无敌
    /// </summary>
    /// <param name="character"></param>
    /// <returns></returns>
    public bool IsInvulnerable(Character character)
    {
        return invulnerableStatusDictionary.ContainsKey(character) && invulnerableStatusDictionary[character];
    }

    /// <summary>
    ///  触发无敌状态，更新计时器
    /// </summary>
    /// <param name="duration"></param>
    public void UpdateInvulnerabilityCounter(Character character, InvulnerabilityType type)
    {
        string tag = character.tag;
        // 获取tag对应的配置信息字典
        if (invulnerabilityDurationsDicts.ContainsKey(tag))
        {
            var dic = invulnerabilityDurationsDicts[tag];
            // 获取无敌类型对应的信息
            if (dic.ContainsKey(type))
            {

                // 字典中不存在key，初始化字典的字段
                if (!invulnerableStatusDictionary.ContainsKey(character))
                {
                    invulnerableStatusDictionary.Add(character, false);
                }
                if (!invulnerableCounterDictionary.ContainsKey(character))
                {
                    invulnerableCounterDictionary.Add(character, 0f);
                }

                //isInvulnerable = true;
                invulnerableStatusDictionary[character] = true;
                invulnerableCounterDictionary[character] = dic[type];// 字典中读取的配置
            }
        }
        
    }

    /// <summary>
    /// 重置计时器
    /// </summary>
    public void ResetInvulnerability(Character character)
    {
        invulnerableStatusDictionary[character] = false;
        invulnerableCounterDictionary[character] = 0f;
        //isInvulnerable = false;
        //invulnerableCounter = 0;
    }

}
